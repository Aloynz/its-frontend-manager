generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
  relationMode      = "foreignKeys"
}

model Question {
  id                String       @id @unique @default(cuid())
  title             String
  description       String
  language          String
  entry_function    String?
  io_input          String?
  func_args         String?
  reference_program String       @unique
  course            Course       @relation(fields: [courseId], references: [id])
  courseId          String
  submissions       Submission[]

  @@map("questions")
}

model Submission {
  id                String   @id @unique @default(cuid())
  submit_time       DateTime @default(now())
  question          Question @relation(fields: [question_id], references: [id])
  question_id       String
  user              User     @relation(fields: [user_id], references: [id])
  user_id           String
  submitted_program String
  feedback          String?
  grade             Int?

  @@map("submissions")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id              String       @id @default(uuid())
  email           String?      @unique
  password        String?
  role            Role?
  school          School       @relation(fields: [school_id], references: [id])
  school_id       String
  accounts        Account[]
  created_courses Course[]     @relation("course_creator")
  joined_courses  Course[]     @relation("course_members")
  submissions     Submission[]

  @@map("users")
}

model School {
  id      String   @id
  name    String
  users   User[]
  courses Course[]

  @@map("schools")
}

model Course {
  id         String     @id
  code       String
  name       String
  creator    User       @relation("course_creator", fields: [creator_id], references: [id])
  creator_id String
  school     School     @relation(fields: [school_id], references: [id])
  school_id  String
  members    User[]     @relation("course_members")
  questions  Question[]

  @@map("courses")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String?
  provider          String
  providerAccountId String  @map("provider_account_id")
  token_type        String?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  scope             String?
  id_token          String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  session_token     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
